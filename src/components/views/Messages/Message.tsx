import React, { useState } from 'react';
import { classes } from '@utils';
import { ReactComponent as FilterIcon } from '@assets/icons/button/filter.svg';
// import { ReactComponent as CloseIcon } from '@assets/icons/button/close.svg';
import Select, { ISelectOption } from '../../ui/Select/Select';
import ButtonSwitcher from '../../ui/ButtonSwitcher/ButtonSwicther';
import './Messages.css';
import DatePicker from '../../ui/DatePicker/DatePicker';
import Button from '../../ui/Button/Button';
import DropDown from '../../ui/DropDown/DropDown';
import FilterPanel from './FilterPanel/FilterPanel';

const cls = classes('messages');
const pOptions: ISelectOption[] = [
  { label: <span>–í—Å–µ <i>+195</i> <b>3297</b></span>, value: 'all' },
  { label: <span>–¢—Ä–µ–±—É—é—Ç —Ä–µ–∞–∫—Ü–∏–∏ <b>27</b></span>, value: 'require-reaction' },
  { label: <span>–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ <b>3297</b></span>, value: 'not-processed' },
  { label: <span>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ <b>795</b></span>, value: 'processed' },
  { label: <span>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–Ω–µ <b>4</b></span>, value: 'my' },
];
const filterTemplates: ISelectOption[] = [
  { label: <span>–®–∞–±–ª–æ–Ω 1</span>, value: 'template-1' },
  { label: <span>–®–∞–±–ª–æ–Ω 2</span>, value: 'template-2' },
  { label: <span>–®–∞–±–ª–æ–Ω 3</span>, value: 'template-3' },
];
const filters = [
  { group: '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', label: 'üòÅ –ü–æ–∑–∏—Ç–∏–≤', icon: '' },
  { group: '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', label: 'üòê –ù–µ–π—Ç—Ä–∞–ª', icon: '' },
  { group: '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', label: 'üò° –ù–µ–≥–∞—Ç–∏–≤', icon: '' },
  { group: '–ò—Å—Ç–æ—á–Ω–∏–∫–∏', label: '–¢–í 400', icon: '' },
  { group: '–ò—Å—Ç–æ—á–Ω–∏–∫–∏', label: '–†–∞–¥–∏–æ 34', icon: '' },
  { group: '–ò—Å—Ç–æ—á–Ω–∏–∫–∏', label: '–ü–µ—á–∞—Ç–Ω—ã–µ –°–ú–ò 600', icon: '' },
  { group: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', label: '–†–æ—Å—Å–∏—è 400', icon: '' },
  { group: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', label: '–ë–µ–ª–∞—Ä—É—Å—å 34', icon: '' },
  { group: '–ß—Ç–æ-—Ç–æ –µ—â—ë', label: '–ö–æ–º–ø–∞–Ω–∏–∏ 443', icon: '' },
  { group: '–ß—Ç–æ-—Ç–æ –µ—â—ë', label: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã 3363', icon: '' },
  { group: '–ß—Ç–æ-—Ç–æ –µ—â—ë', label: '–û—Ç—Ä–∞—Å–ª—å 7030', icon: '' },
];

enum ScreenType {
  SMI = 'smi',
  SOCIAL = 'social',
}

const Messages: React.FC = () => {
  const [ activeType, setActiveType ] = useState<string | number>(ScreenType.SMI);
  const [ isOpenFilter, setIsOpenFilter ] = useState(false);

  return (
    <div { ...cls('', '', 'container') }>
      <section { ...cls('head') }>
        {/* TODO: –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è —É —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ —É –∫–Ω–æ–ø–æ–∫ rounded | square */}
        <Select
          options={ pOptions }
          selected="not-processed"
          onChange={ console.log }
        />
        <ButtonSwitcher
          activeButtonId={ activeType }
          buttons={ [
            { id: ScreenType.SMI, label: '–°–ú–ò 1 022' },
            { id: ScreenType.SOCIAL, label: '–°–û–¶–ú–ï–î–ò–ê 1 480' },
          ] }
          onChange={ (buttonId) => setActiveType(buttonId) }
        />

        <DatePicker />

        <div { ...cls('filter-with-drop-down') }>
          <Button
            { ...cls('filter-button') }
            icon={ FilterIcon }
            color="coral"
            rounded
            onClick={ () => setIsOpenFilter(!isOpenFilter) }
          />
          <DropDown
            { ...cls('filter-drop-down') }
            isOpen={ isOpenFilter }
            onClose={ () => setIsOpenFilter(false) }
          >
            {// TODO: –†–∞–∑–º–µ—Ä 24 –∏ –ø—Ä–æ–≥—Ä–∞—á–Ω–æ—Å—Ç—å –µ—Å—Ç—å –≤ –≤–µ—Ç–∫–µ 179, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤–æ–ª—å—ë—Ç—Å—è –≤ dev
            /* <Button
              icon={ CloseIcon }
              // size={ 24 }
              color="gray"
              // transparent
            /> */}
            <FilterPanel
              filters={ filters }
              templates={ filterTemplates }
              activeTemplate="template-2"
              onReset={ console.log }
              onApply={ console.log }
            />
          </DropDown>
        </div>
      </section>
    </div>
  );
};

export default Messages;
