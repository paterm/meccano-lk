import React, { useEffect, useState } from 'react';
import { classes, useQueryParams } from '@utils';
import { ReactComponent as FilterIcon } from '@assets/icons/button/filter.svg';
import { ReactComponent as CloseIcon } from '@assets/icons/button/close.svg';
import moment from 'moment';
import { TDatesPeriod } from '@t';
import Select, { ISelectOption } from '../../ui/Select/Select';
import ButtonSwitcher from '../../ui/ButtonSwitcher/ButtonSwicther';
import DatePicker from '../../ui/DatePicker/DatePicker';
import Button from '../../ui/Button/Button';
import DropDown from '../../ui/DropDown/DropDown';
import FilterPanel from './FilterPanel/FilterPanel';
import MessagesControlPanel from './MessagesControlPanel/MessagesControlPanel';
import MessageList from './MessageList/MessageList';
import avatarRbk from '../../../assets/temp/rbk.jpg';
import avatarSber from '../../../assets/temp/sber.jpg';
import { IMessage } from '../../../interfaces/IMessage';
import './Messages.css';

const cls = classes('messages');

const testOnClick = (message: any) => {
  // eslint-disable-next-line no-console
  console.log(`onClick => ${message}`);
};

enum ScreenType {
  SMI = 'smi',
  SOCIAL = 'social',
}

const testMessagesExample: IMessage[] = [
  {
    id: '1',
    typeId: 'T1',
    typeSlug: ScreenType.SMI,
    typeName: '–°–ú–ò',
    date: '11:25 15.01.2021',
    needReaction: true,
    isCompleted: false,
    isFavorited: false,
    isDeleted: false,
    title: '–°–±–µ—Ä–±–∞–Ω–∫ –∫—É–ø–∏—Ç —Å–µ—Ä–≤–∏—Å 2–ì–ò–° –ó–∞—á–µ–º –≥–æ—Å–±–∞–Ω–∫—É –ø–æ–Ω–∞–¥–æ–±–∏–ª—Å—è –æ–¥–∏–Ω –∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ ¬´–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã¬ª',
    annotation: '–°–±–µ—Ä–±–∞–Ω–∫ –ø–æ–ª—É—á–∏—Ç 72% —Å–µ—Ä–≤–∏—Å–∞ 2–ì–ò–°, –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –†—É–Ω–µ—Ç–∞, ‚Äî –≤ —Ä–∞–º–∫–∞—Ö —Å–¥–µ–ª–∫–∏ –µ–µ –æ—Ü–µ–Ω–∏–ª–∏ –≤ 14,3 –º–ª—Ä–¥ —Ä—É–±. –ï—â–µ 3% –±—É–¥–µ—Ç —É –°–ü –±–∞–Ω–∫–∞ –∏ Mail.ru Group. –ò–∑ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤—ã–π–¥—É—Ç Baring Vostok –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –õ–µ–æ–Ω–∏–¥–∞ –ë–æ–≥—É—Å–ª–∞–≤—Å–∫–æ–≥–æ. –°–±–µ—Ä–±–∞–Ω–∫ –ø–æ–¥–ø–∏—Å–∞–ª –æ–±—è–∑—ã–≤–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö‚Ä¶',
    text: '',
    mfiPrevValue: 30,
    mfiValue: 34,
    erPrevValue: 60,
    erValue: 57,
    tone: 'neutral',
    sourceId: '',
    sourceName: '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏',
    sourceLink: 'https://qwertyqwertyqwerty.com/news/1',
    cityId: '',
    cityName: '–ú–æ—Å–∫–≤–∞',
    sourceAvatar: avatarRbk,
    tags: []
  },
  {
    id: '2',
    typeId: 'T1',
    typeSlug: ScreenType.SMI,
    typeName: '–°–ú–ò',
    date: '12:30 15.06.2020',
    needReaction: false,
    isCompleted: false,
    isFavorited: false,
    isDeleted: false,
    title: '–í —Ä–∞–±–æ—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–æ–≤ –°–±–µ—Ä–±–∞–Ω–∫–∞ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π',
    annotation: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –°–±–µ—Ä–±–∞–Ω–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –µ–≥–æ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–∞–º. –û –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º ¬´–°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω¬ª —Å–æ–æ–±—â–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ—Ç–∏ Twitter (1, 2). –î–∞–Ω–Ω—ã–µ –æ —Å–±–æ—è—Ö –≤ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–∞—Ö –±–∞–Ω–∫–∞ –ø–æ—è–≤–∏–ª–∏—Å—å –∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ Downdetector, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–µ–º —Ä–∞–±–æ—Ç—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–æ–≤.',
    text: '',
    mfiPrevValue: 0,
    mfiValue: 47,
    erPrevValue: 63,
    erValue: 63,
    tone: 'negative',
    sourceId: '',
    sourceName: '–õ–µ–Ω—Ç–∞',
    sourceLink: 'https://qwertyqwertyqwerty.com/news/1',
    cityId: '',
    cityName: '–ú–æ—Å–∫–≤–∞',
    sourceAvatar: avatarSber,
    tags: []
  },
  {
    id: '3',
    typeId: 'T2',
    typeSlug: ScreenType.SOCIAL,
    typeName: '–°–û–¶–ú–ï–î–ò–ê',
    date: '14:44 15.06.2020',
    needReaction: false,
    isCompleted: false,
    isFavorited: false,
    isDeleted: false,
    title: '–ü–æ–¥—Å–ª—É—à–∞–Ω–æ –°–±–µ—Ä–±–∞–Ω–∫ | –ö–∞–∫ –≤–∞–º –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–±–µ—Ä–±–∞–Ω–∫–∞?',
    annotation: '–ú–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è, —Å–∞–º –ø–æ–ª—å–∑—É—é, —Ö–æ—á—É —Ä–æ–¥–∏—Ç–µ–ª—è–º —Ç–æ–∂–µ –≤–∑—è—Ç—å. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫–∞—è —Å—É–º–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞ –≥–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è? –ö—Ç–æ –∑–Ω–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ –ø–ª–∏–∑.',
    text: '',
    mfiPrevValue: 21,
    mfiValue: 34,
    erPrevValue: 59,
    erValue: 57,
    tone: 'positive',
    sourceId: '',
    sourceName: '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤',
    sourceLink: 'https://qwertyqwertyqwerty.com/news/1',
    cityId: '',
    cityName: '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
    sourceAvatar: '',
    tags: []
  },
];

const testMessages: any[] = [];

Array.apply('', Array(42)).forEach((el, index) => {
  testMessages.push({
    ...testMessagesExample[0],
    id: (+testMessagesExample[1].id * index + 1).toString()
  });
  testMessages.push({
    ...testMessagesExample[1],
    id: (+testMessagesExample[1].id * index + 2).toString()
  });
  testMessages.push({
    ...testMessagesExample[2],
    id: (+testMessagesExample[2].id * index + 3).toString()
  });
});

const getTestMessages = (type: any) => testMessages.filter((el: any) => el.typeSlug === type);

const pOptions: ISelectOption[] = [
  { label: <span>–í—Å–µ <i>+195</i> <b>3297</b></span>, value: 'all' },
  { label: <span>–¢—Ä–µ–±—É—é—Ç —Ä–µ–∞–∫—Ü–∏–∏ <b>27</b></span>, value: 'require-reaction' },
  { label: <span>–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ <b>3297</b></span>, value: 'not-processed' },
  { label: <span>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ <b>795</b></span>, value: 'processed' },
  { label: <span>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–Ω–µ <b>4</b></span>, value: 'my' },
];
const filterTemplates = [
  { name: '–®–∞–±–ª–æ–Ω #1', id: 'a2r' },
  { name: '–®–∞–±–ª–æ–Ω #2', id: 'b4d' },
  { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–∞', id: 'k6d' },
  { name: '–®–∞–±–ª–æ–Ω #4', id: 'uu7' },
];
const initFilters = [
  { group: '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', label: 'üòÅ –ü–æ–∑–∏—Ç–∏–≤', isActived: true },
  { group: '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', label: 'üòê –ù–µ–π—Ç—Ä–∞–ª', isActived: false },
  { group: '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', label: 'üò° –ù–µ–≥–∞—Ç–∏–≤', isActived: false },
  { group: '–ò—Å—Ç–æ—á–Ω–∏–∫–∏', label: '–¢–í 400', isActived: true },
  { group: '–ò—Å—Ç–æ—á–Ω–∏–∫–∏', label: '–†–∞–¥–∏–æ 34', isActived: true },
  { group: '–ò—Å—Ç–æ—á–Ω–∏–∫–∏', label: '–ü–µ—á–∞—Ç–Ω—ã–µ –°–ú–ò 600', isActived: true },
  { group: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', label: '–†–æ—Å—Å–∏—è 400', isActived: false },
  { group: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', label: '–ë–µ–ª–∞—Ä—É—Å—å 34', isActived: false },
  { group: '–ß—Ç–æ-—Ç–æ –µ—â—ë', label: '–ö–æ–º–ø–∞–Ω–∏–∏ 443', isActived: false },
  { group: '–ß—Ç–æ-—Ç–æ –µ—â—ë', label: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã 3363', isActived: false },
  { group: '–ß—Ç–æ-—Ç–æ –µ—â—ë', label: '–û—Ç—Ä–∞—Å–ª—å 7030', isActived: false },
];

const initialPeriod: TDatesPeriod = {
  startDate: moment().subtract(1, 'w').startOf('day'),
  endDate: moment()
};

const Messages: React.FC = () => {
  const [ activeType, setActiveType ] = useState<string | number>(ScreenType.SMI);
  const [ datePeriod, setDatePeriod ] = useState<TDatesPeriod>(initialPeriod);
  const [ filters, setFilters ] = useState(initFilters);
  const [ activeFilterTemplateId, setActiveFilterTemplateId ] = useState(filterTemplates[2].id);
  const [ isOpenFilter, setIsOpenFilter ] = useState(false);
  const [ messages, setMessages ] = useState((getTestMessages(activeType).slice(0, 10)));
  const [ selectedMessages, setSelectedMessages ] = useState([] as string[]);
  const [ messagesScrollIndex, setMessagesScrollIndex ] = useState(0);
  const [ visibleRange, setVisibleRange ] = useState({
    startIndex: 0,
    endIndex: 0,
  });
  const [ rangeStep ] = useState(10);
  const queryParams = useQueryParams();

  useEffect(() => {
    setMessages(getTestMessages(activeType));
  }, [activeType]);

  useEffect(() => {
    const type = queryParams.get('type');
    setActiveType(type || activeType);
  }, [queryParams, activeType]);

  const handleCheckFilter = (values: any) => {
    const updatedFilres = [...filters];
    values.forEach((value: any) => {
      const filterIndex = filters.findIndex((el) => el.label === value.label);
      updatedFilres[filterIndex] = value;
    });
    setFilters(updatedFilres);
  };

  const handleDeleteFilter = (values: any) => {
    const updatedFilres = [...filters];
    const deleteIndices = values.map((value: any) => filters
      .findIndex((el) => el.label === value.label));
    updatedFilres.splice(deleteIndices[0], deleteIndices.length);
    setFilters(updatedFilres);
  };

  const handleChangeFilterTemplate = (id: string) => {
    setActiveFilterTemplateId(id);
  };

  const handleSeletAllMessages = (value: boolean) => {
    if (value) {
      const selected: string[] = getTestMessages(activeType).map((el) => el.id);
      setSelectedMessages(selected);
    } else {
      setSelectedMessages([]);
    }
  };

  const addToSelected = (id: string) => {
    if (selectedMessages.includes(id)) return;
    setSelectedMessages([ ...selectedMessages, id]);
  };

  const removeFromSelected = (id: string) => {
    const indexMessage = selectedMessages.findIndex((el) => el === id);
    if (indexMessage === -1) return;
    const updatedMessages = [ ...selectedMessages ];
    updatedMessages.splice(indexMessage, 1);
    setSelectedMessages(updatedMessages);
  };

  const handleSelectMessage = (id: string, value: boolean) => {
    if (value) addToSelected(id);
    else removeFromSelected(id);
  };

  const handleScrollToIndex = (index: number) => {
    setMessagesScrollIndex(index);
  };

  // useEffect(() => {
  //   setMessagesScrollIndex(visibleRange.startIndex);
  // }, [visibleRange.startIndex]);

  const loadMoreMessages = (lastMessageIndex: number) => {
    if (lastMessageIndex >= (getTestMessages(activeType).length - 1)) return;
    const slice = getTestMessages(activeType).slice(lastMessageIndex + 1, lastMessageIndex + 11);
    setTimeout(() => {
      setMessages([ ...messages, ...slice ]);
    }, 1000);
  };

  return (
    <div { ...cls('') }>
      <section { ...cls('head', '', 'container') }>
        <Select
          options={ pOptions }
          selected="not-processed"
          onChange={ () => {} }
        />
        <ButtonSwitcher
          activeButtonId={ activeType }
          buttons={ [
            { id: ScreenType.SMI, label: '–°–ú–ò 1 022' },
            { id: ScreenType.SOCIAL, label: '–°–û–¶–ú–ï–î–ò–ê 1 480' },
          ] }
          onChange={ (buttonId) => queryParams.set({ type: buttonId as string }) }
        />

        <DatePicker value={ datePeriod } onChange={ setDatePeriod } />

        <div { ...cls('filter-with-drop-down') }>
          <Button
            { ...cls('filter-button') }
            icon={ FilterIcon }
            color="coral"
            rounded
            onClick={ () => setIsOpenFilter(!isOpenFilter) }
            badge={ 1249 }
          />
          {isOpenFilter && (
            <Button
              { ...cls('filter-close-button') }
              icon={ CloseIcon }
              size={ 24 }
              color="gray"
              transparent
              onClick={ () => setIsOpenFilter(true) }
            />
          )}
          <DropDown
            { ...cls('filter-drop-down') }
            isOpen={ isOpenFilter }
            onClose={ () => setIsOpenFilter(false) }
          >
            <FilterPanel
              filters={ filters }
              templates={ filterTemplates }
              activeTemplateId={ activeFilterTemplateId }
              onReset={ () => testOnClick('–ù–∞–∂–∞–ª —Å–±—Ä–æ—Å') }
              onApply={ () => testOnClick('–ù–∞–∂–∞–ª –ø—Ä–∏–º–µ–Ω–∏—Ç—å') }
              onChangeTemplate={ handleChangeFilterTemplate }
              onCheck={ handleCheckFilter }
              onDelete={ handleDeleteFilter }
            />
          </DropDown>
        </div>
      </section>
      <section { ...cls('body', '', 'container') }>
        <MessagesControlPanel
          { ...cls('messages-control-panel') }
          selected={ selectedMessages }
          onSelectAll={ handleSeletAllMessages }
          onOpenFilter={ () => setIsOpenFilter(true) }
          pagination={
            {
              currentIndex: visibleRange.startIndex,
              totalCount: getTestMessages(activeType).length,
              perPage: rangeStep
            }
          }
          onScrollToIndex={ handleScrollToIndex }
        />
        <MessageList
          messages={ messages }
          selected={ selectedMessages }
          totalMessages={ getTestMessages(activeType).length }
          scrollIndex={ messagesScrollIndex }
          onSelect={ handleSelectMessage }
          onChangeRange={ setVisibleRange }
          onShowMore={ loadMoreMessages }
        />
      </section>
    </div>
  );
};

export default Messages;
